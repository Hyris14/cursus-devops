- hosts: localhost
  become: true
  vars:
    token: "783bde.3f89s0fje9f38fhf"
    swap_disabled: true
    kubernetes_pod_network:
      cni: 'flannel'
      cidr: '10.244.0.0/16'
    kubernetes_version: "{{ kubernetes_version_ubuntu_package.split('.')[:2] | join('.') }}"
    kubernetes_kubelet_extra_args: "--node-ip={{ ansible_enp0s8.ipv4.address }}"
    crictl_version: "v1.30.0"
    kubernetes_config_kubelet_configuration:
      cgroupDriver: "systemd"
      failSwapOn: false
    kubernetes_config_kube_proxy_configuration:
      ipvs:
        strictARP: true
    kubernetes_config_init_configuration:
      localAPIEndpoint:
        advertiseAddress: "{{ kubernetes_apiserver_advertise_address | default(ansible_default_ipv4.address, true) }}"
      bootstrapTokens:
        - token: "{{ token }}"
          description: "another bootstrap token"
          usages:
          - authentication
          - signing
          groups:
          - system:bootstrappers:kubeadm:default-node-token
    kubernetes_allow_pods_on_master: true

  pre_tasks:
  - name: Create keyrings directory
    file:
      path: /etc/apt/keyrings
      state: directory
      mode: '0755'

  - name: Add Kubernetes APT GPG key
    get_url:
      url: https://pkgs.k8s.io/core:/stable:/v1.31/deb/Release.key
      dest: /tmp/kubernetes-apt-keyring.gpg

  - name: Import GPG key
    command: gpg --dearmor -o /etc/apt/keyrings/kubernetes-apt-keyring.gpg /tmp/kubernetes-apt-keyring.gpg
    args:
      removes: /tmp/kubernetes-apt-keyring.gpg

  - name: Add Kubernetes APT repository
    lineinfile:
      path: /etc/apt/sources.list.d/kubernetes.list
      line: 'deb [signed-by=/etc/apt/keyrings/kubernetes-apt-keyring.gpg] https://pkgs.k8s.io/core:/stable:/v1.31/deb/ /'
      state: present

  - name: Update all packages
    apt:
      update_cache: yes
      upgrade: dist

  - name: Install required packages
    apt:
      name:
        - curl
        - apt-transport-https
        - ca-certificates
        - software-properties-common
      state: present

  - name: Disable swap
    shell: |
      swapoff -a
      sed -i '/ swap / s/^\(.*\)$/#\1/g' /etc/fstab
    when: swap_disabled == true

  - name: Install NTP
    apt:
      name: ntp
      state: present

  - name: Update time
    service:
      name: ntp
      state: restarted

  - name: Enable IP forwarding
    sysctl:
      name: net.ipv4.ip_forward
      value: '1'
      sysctl_set: true
      state: present

  roles:
    - role: geerlingguy.pip
    - role: geerlingguy.containerd
    - role: geerlingguy.kubernetes
      kubernetes_packages:
        - name: kubelet-{{ kubernetes_version_ubuntu_package }}
          state: present
        - name: kubectl-{{ kubernetes_version_ubuntu_package }}
          state: present
        - name: kubeadm-{{ kubernetes_version_ubuntu_package }}
          state: present
        - name: kubernetes-cni
          state: present

  post_tasks:
  - name: Configure Flannel networking for enp0s8
    shell: "curl {{ kubernetes_flannel_manifest_file }} | sed '/kube-subnet-mgr.*/a\\        - --iface=enp0s8' | kubectl apply -f -"
    register: flannel_result
    changed_when: "'created' in flannel_result.stdout"
    when: kubernetes_pod_network.cni == 'flannel' and kubernetes_role == 'control_plane' and installation_method == 'vagrant'
    retries: 3
    delay: 5

  - name: Download crictl binary
    get_url:
      url: "https://github.com/kubernetes-sigs/cri-tools/releases/download/{{ crictl_version }}/crictl-{{ crictl_version }}-linux-amd64.tar.gz"
      dest: /tmp/crictl.tar.gz

  - name: Extract crictl binary
    ansible.builtin.unarchive:
      src: /tmp/crictl.tar.gz
      dest: /usr/local/bin
      remote_src: yes

  - name: Remove crictl archive
    ansible.builtin.file:
      path: /tmp/crictl.tar.gz
      state: absent

  - name: Create crictl configuration directory
    ansible.builtin.file:
      path: /etc/crictl.d
      state: directory

  - name: Configure crictl
    ansible.builtin.copy:
      content: |
        runtime-endpoint: unix:///var/run/containerd/containerd.sock
        image-endpoint: unix:///var/run/containerd/containerd.sock
        timeout: 2
        debug: true
        pull-image-on-create: false
      dest: /etc/crictl.yaml
